# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|
  unless Vagrant.has_plugin?("vagrant-reload")
    raise 'Plugin vagrant-reload is not installed!'
  end

  if Vagrant.has_plugin?("vagrant-proxyconf")
    config.proxy.http     = ENV.fetch('http_proxy', false)
    config.proxy.https    = ENV.fetch('https_proxy', false)
    config.proxy.no_proxy = ENV.fetch('no_proxy', false)
  end

  vm_name = ENV.fetch('VM_NAME', "nff-go")
  vm_group_size = ENV.fetch('VM_GROUP_SIZE', 3).to_i
  vm_total_number = ENV.fetch("VM_TOTAL_NUMBER", 3).to_i
  vm_links_number = ENV.fetch("VM_LINKS_NUMBER", 2).to_i
  vm_port_base = ENV.fetch("VM_TUNNEL_PORT_BASE", 12345).to_i
  vm_second_port_base = vm_port_base + (vm_links_number + 1) * vm_total_number

  config.vm.box = "generic/ubuntu1804"
#  config.vm.box = "fedora/28-cloud-base"

  # Docker server port
  config.vm.network "forwarded_port", guest: 2375, host: 2375, auto_correct: true

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  config.vm.provider "libvirt" do |lv|
    lv.driver = "kvm"
    lv.memory = "4096"
    lv.cpus = 16
    lv.storage_pool_name = "images"
  end

  config.vm.provider "virtualbox" do |vb|
    vb.gui = false
    vb.memory = "4096"
    vb.cpus = 8
    (1..vm_links_number * 2).each do |j|
      vb.customize ["modifyvm", :id, "--nicpromisc#{j + 1}", "allow-all"]
    end
  end

$provision_common0 = <<SHELL
echo Fixing bootloader to use consistent interface names
sudo sed -i -e 's,biosdevname=0,biosdevname=1,' /etc/default/grub
sudo sed -i -e 's,net.ifnames=0,net.ifnames=1,' /etc/default/grub
sudo sed -i -e 's,quiet,,' /etc/default/grub
if command -v update-grub &>/dev/null
then
   sudo update-grub
else
   sudo grub2-mkconfig -o /boot/grub2/grub.cfg
fi
if [ "$(readlink /etc/udev/rules.d/80-net-setup-link.rules)" == /dev/null ]
then
    echo Fixing udev to use consistent interface names
    sudo rm /etc/udev/rules.d/80-net-setup-link.rules
    sudo cp /usr/lib/udev/rules.d/80-net-setup-link.rules /etc/udev/rules.d/
fi

if [ -d /etc/netplan ]
then
    echo Fixing hardcoded DNS configuration
    sudo sed -i -e 's,DNS=.*,DNS=,' /etc/systemd/resolved.conf
    sudo sed -i -e 's,DNSSEC=yes,DNSSEC=no,' /etc/systemd/resolved.conf

    sudo sh -c 'cat > /etc/netplan/10-ens5.yaml <<EOF
network:
  version: 2
  renderer: networkd
  ethernets:
    ens5:
      dhcp4: true
      dhcp6: true
      optional: true
    enp0s3:
      dhcp4: true
      dhcp6: true
      optional: true
EOF'
    sudo sh -c 'cat > /etc/netplan/50-vagrant.yaml <<EOF
---
network:
  version: 2
  renderer: networkd
  ethernets: {}
EOF'
fi

if [ -e /etc/selinux/config ]
then
    echo Disabling SELinux
    sudo sed -i -e 's,SELINUX=enforcing,SELINUX=disabled,' /etc/selinux/config
fi
SHELL

$provision_fedora = <<SHELL
echo Installing system packages
sudo dnf update -y
sudo dnf install -y python make gcc git numactl-devel libpcap-devel elfutils-libelf-devel lua-devel NetworkManager net-tools redhat-lsb-core pciutils kernel-modules kernel-devel wget vim protobuf-compiler
sudo systemctl enable NetworkManager
sudo systemctl start NetworkManager
SHELL

$provision_ubuntu = <<SHELL
echo Installing system packages
sudo apt-get update
sudo apt-get install -y python make gcc git libnuma-dev libpcap0.8-dev libelf-dev liblua5.3-dev network-manager protobuf-compiler
sudo systemctl enable network-manager
sudo systemctl start network-manager

echo Switching to NetworkManager to manage network cards
sudo sed -i -e 's,renderer: networkd,renderer: NetworkManager,' /etc/netplan/50-vagrant.yaml
SHELL

$provision_common1 = <<SHELL
syscon=$(nmcli --fields device,name,type,state -t c s | grep activated | grep -v bridge | cut -d: -f2)
echo Reassigning "${syscon}" interface to system name
sudo nmcli c mod "${syscon}" connection.id 'System connection'

echo Unpacking Go language into /opt
(cd /opt; sudo sh -c 'curl -L -s https://dl.google.com/go/go1.11.4.linux-amd64.tar.gz | tar zx')
mkdir go
chmod +x ~/scripts.sh
. ~/scripts.sh
echo . ~/scripts.sh >> .bashrc
setuptesthost

echo Downloading and building NFF-GO framework
go get -v golang.org/x/tools/cmd/stringer
git clone -b master --recurse-submodules http://github.com/intel-go/nff-go
(cd nff-go; go mod download; make)
echo Downloading and building NFF-GO NAT example and its dependencies
go get github.com/golang/protobuf/protoc-gen-go
git clone -b master --recurse-submodules http://github.com/intel-go/nff-go-nat
(cd nff-go-nat; go mod download; . env.sh; make)
./nff-go-nat/test/httpperfserv/install-systemd-service.sh "-port 8008"

echo Setting up 1024 huge pages
sudo sh -c 'echo 1024 > /sys/devices/system/node/node0/hugepages/hugepages-2048kB/nr_hugepages'
sudo sh -c 'echo vm.nr_hugepages=1024 >> /etc/sysctl.conf'
SHELL

  config.vm.provision "file", source: "scripts.sh", destination: "scripts.sh"
  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", privileged: false, inline: $provision_common0
  config.vm.provision :reload
  config.vm.provision "shell", privileged: false, inline: $provision_ubuntu
  # Optional Fedora provisioning, use if you want to work in Fedora
  # environment.
  config.vm.provision "shell", privileged: false, run: "never", inline: $provision_fedora
  # Reboot VM after distro specific provisioning
  config.vm.provision :reload
  config.vm.provision "shell", privileged: false, inline: $provision_common1
  # Reboot VM after provisioning
  config.vm.provision :reload

  # Define six NFF-GO VMs
  user = ENV.fetch('USER', "nouser")
  (0..vm_total_number - 1).each do |i|
    config.vm.define "#{vm_name}-#{i}" do |node|
      node.vm.hostname = "#{vm_name}-#{i}"

      # Create inter-VM connections for VMs inside of one VM group
      if i % vm_group_size != 0
        # Define backward inter-VM virtual network links
        (1..vm_links_number).each do |j|
          node.vm.network "private_network",
                          auto_config: false,
                          virtualbox__intnet: "#{vm_name}-link-#{user}-#{i}-#{j}",
                          :model_type => 'virtio',
                          :libvirt__forward_mode => 'none',
                          :libvirt__tunnel_type => 'udp',
                          :libvirt__tunnel_local_port => vm_second_port_base + i * vm_links_number + j,
                          :libvirt__tunnel_port => vm_port_base + i * vm_links_number + j
        end
      end

      if i + 1 < vm_total_number && (i + 1) % vm_group_size != 0
        # Define forward inter-VM virtual network links
        (1..vm_links_number).each do |j|
          node.vm.network "private_network",
                          auto_config: false,
                          virtualbox__intnet: "#{vm_name}-link-#{user}-#{i + 1}-#{j}",
                          :model_type => 'virtio',
                          :libvirt__forward_mode => 'none',
                          :libvirt__tunnel_type => 'udp',
                          :libvirt__tunnel_local_port => vm_port_base + (i + 1) * vm_links_number + j,
                          :libvirt__tunnel_port => vm_second_port_base + (i + 1) * vm_links_number + j
        end
      end
    end
  end
end
